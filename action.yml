name: 'Claude Code GitHub Action'
description: 'GitHub action for Claude Code Integration'
branding:
  icon: 'message-square'
  color: 'purple'

inputs:
  mode:
    description: 'The mode to run the action in (review, pr-comment, comment, direct)'
    required: true
    default: 'review'
  pr-number:
    description: 'Pull request number'
    required: false
  feedback:
    description: 'The feedback text from the comment'
    required: false
  anthropic-api-key:
    description: 'Anthropic API key for Claude access'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: true
  model-id:
    description: 'Claude model ID to use'
    required: false
    default: 'claude-3-7-sonnet-20250219'
  use-bedrock:
    description: 'Whether to use AWS Bedrock for Claude access'
    required: false
    default: 'false'
  max-tokens:
    description: 'Maximum tokens to generate in the response'
    required: false
    default: '4096'
  temperature:
    description: 'Temperature for generation'
    required: false
    default: '0.7'
  output-file:
    description: 'Path to write the output to'
    required: false
    default: 'claude-code-output'

runs:
  using: 'composite'
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install dependencies
      shell: bash
      run: |
        npm install -g @anthropic-ai/claude-code
        cd ${{ github.action_path }}
        npm install @actions/core @actions/github axios
        
    - name: Set up environment variables
      shell: bash
      run: |
        # Set Anthropic API key
        export ANTHROPIC_API_KEY="${{ inputs.anthropic-api-key }}"
        
        # Set up AWS environment if using Bedrock
        if [[ "${{ inputs.use-bedrock }}" == "true" ]]; then
          if [[ -n "${{ env.BEDROCK_AWS_ACCESS_KEY_ID }}" && -n "${{ env.BEDROCK_AWS_SECRET_ACCESS_KEY }}" ]]; then
            mkdir -p ~/.aws
            cat > ~/.aws/credentials << EOF
        [default]
        aws_access_key_id = ${{ env.BEDROCK_AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ env.BEDROCK_AWS_SECRET_ACCESS_KEY }}
        EOF
            if [[ -n "${{ env.BEDROCK_AWS_REGION }}" ]]; then
              cat > ~/.aws/config << EOF
        [default]
        region = ${{ env.BEDROCK_AWS_REGION }}
        EOF
            fi
          fi
        fi
        
    - name: Create runner script
      shell: bash
      run: |
        cat > ${{ github.action_path }}/run.js << 'EOF'
        const core = require('@actions/core');
        const github = require('@actions/github');
        const { exec } = require('child_process');
        const { promisify } = require('util');
        const fs = require('fs').promises;
        const path = require('path');
        const execAsync = promisify(exec);
        
        async function run() {
          try {
            const mode = core.getInput('mode');
            const prNumber = core.getInput('pr-number');
            const feedback = core.getInput('feedback');
            const githubToken = core.getInput('github-token');
            const modelId = core.getInput('model-id');
            const maxTokens = core.getInput('max-tokens');
            const temperature = core.getInput('temperature');
            const useBedrock = core.getInput('use-bedrock') === 'true';
            
            console.log(`Running Claude Code in ${mode} mode`);
            console.log(`Using model: ${modelId}`);
            
            const octokit = github.getOctokit(githubToken);
            const context = github.context;
            
            // Basic command with model parameters
            let claudeCommand = `claude --model ${modelId} --max-tokens ${maxTokens} --temperature ${temperature}`;
            
            // Add provider flag if using Bedrock
            if (useBedrock) {
              claudeCommand += ' --provider bedrock';
            }
            
            let promptText = '';
            let responseText = '';
            
            if (mode === 'review' || mode === 'pr-comment') {
              // Get PR details
              const { data: pullRequest } = await octokit.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber)
              });
              
              // Get PR files
              const { data: files } = await octokit.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber)
              });
              
              // Generate context for Claude
              promptText = `You are reviewing a pull request in the ${context.repo.repo} repository.
              
              PR Title: ${pullRequest.title}
              PR Description: ${pullRequest.body || '(No description provided)'}
              
              Files changed in this PR:
              ${files.map(file => `- ${file.filename} (${file.status}, +${file.additions}/-${file.deletions})`).join('\n')}
              
              User query:
              ${feedback}
              
              Provide a helpful, concise response to this query in the context of this PR. Focus on giving actionable advice, explanations, or suggestions based on the code context.`;
              
              // Write prompt to temp file
              const promptFile = path.join(process.env.RUNNER_TEMP || '/tmp', 'claude-prompt.txt');
              await fs.writeFile(promptFile, promptText);
              
              // Run Claude CLI
              console.log('Sending request to Claude...');
              const { stdout, stderr } = await execAsync(`${claudeCommand} < ${promptFile}`);
              responseText = stdout;
              
              if (stderr) {
                console.error(`Claude CLI error: ${stderr}`);
              }
              
              // Post response as PR comment
              await octokit.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(prNumber),
                body: responseText
              });
              
              console.log('Posted Claude response as PR comment');
            } else if (mode === 'direct') {
              // Direct mode - just run Claude against the feedback
              promptText = feedback;
              
              // Write prompt to temp file
              const promptFile = path.join(process.env.RUNNER_TEMP || '/tmp', 'claude-prompt.txt');
              await fs.writeFile(promptFile, promptText);
              
              // Run Claude CLI
              console.log('Sending request to Claude...');
              const { stdout, stderr } = await execAsync(`${claudeCommand} < ${promptFile}`);
              responseText = stdout;
              
              if (stderr) {
                console.error(`Claude CLI error: ${stderr}`);
              }
              
              // Write to output file
              const outputFile = core.getInput('output-file');
              await fs.writeFile(outputFile, responseText);
              
              console.log(`Wrote Claude response to ${outputFile}`);
            } else {
              throw new Error(`Unsupported mode: ${mode}`);
            }
            
          } catch (error) {
            core.setFailed(`Action failed: ${error.message}`);
            console.error(error);
          }
        }
        
        run();
        EOF
        
    - name: Execute runner script
      shell: bash
      run: |
        cd ${{ github.action_path }}
        node run.js
      env:
        INPUT_MODE: ${{ inputs.mode }}
        INPUT_PR_NUMBER: ${{ inputs.pr-number }}
        INPUT_FEEDBACK: ${{ inputs.feedback }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_MODEL_ID: ${{ inputs.model-id }}
        INPUT_MAX_TOKENS: ${{ inputs.max-tokens }}
        INPUT_TEMPERATURE: ${{ inputs.temperature }}
        INPUT_USE_BEDROCK: ${{ inputs.use-bedrock }}
        INPUT_OUTPUT_FILE: ${{ inputs.output-file }}
        GITHUB_TOKEN: ${{ inputs.github-token }}